{
  "api": {
    "name": "AdMobPlugin",
    "slug": "admobplugin",
    "docs": "",
    "tags": [],
    "extends": [
      "BannerDefinitions",
      "RewardDefinitions",
      "RewardInterstitialDefinitions",
      "InterstitialDefinitions",
      "AdmobConsentDefinitions"
    ],
    "methods": [
      {
        "name": "initialize",
        "signature": "(options?: AdMobInitializationOptions | undefined) => Promise<void>",
        "parameters": [
          {
            "name": "options",
            "docs": "AdMobInitializationOptions",
            "type": "AdMobInitializationOptions | undefined"
          }
        ],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "group",
            "text": "Initialize"
          },
          {
            "name": "param",
            "text": "options AdMobInitializationOptions"
          },
          {
            "name": "since",
            "text": "1.1.2"
          }
        ],
        "docs": "Initialize AdMob with AdMobInitializationOptions",
        "complexTypes": [
          "AdMobInitializationOptions"
        ],
        "slug": "initialize"
      },
      {
        "name": "trackingAuthorizationStatus",
        "signature": "() => Promise<TrackingAuthorizationStatusInterface>",
        "parameters": [],
        "returns": "Promise<TrackingAuthorizationStatusInterface>",
        "tags": [
          {
            "name": "see",
            "text": "https ://developer.apple.com/documentation/apptrackingtransparency/attrackingmanager/3547038-trackingauthorizationstatus"
          },
          {
            "name": "since",
            "text": "3.1.0"
          }
        ],
        "docs": "Confirm requestTrackingAuthorization status (iOS >14)",
        "complexTypes": [
          "TrackingAuthorizationStatusInterface"
        ],
        "slug": "trackingauthorizationstatus"
      },
      {
        "name": "requestTrackingAuthorization",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "see",
            "text": "https ://developer.apple.com/documentation/apptrackingtransparency/attrackingmanager/3547038-trackingauthorizationstatus"
          },
          {
            "name": "since",
            "text": "5.2.0"
          }
        ],
        "docs": "request requestTrackingAuthorization (iOS >14).\nThis is deprecated method. We recommend UMP Consent.",
        "complexTypes": [],
        "slug": "requesttrackingauthorization"
      },
      {
        "name": "setApplicationMuted",
        "signature": "(options: ApplicationMutedOptions) => Promise<void>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "ApplicationMutedOptions"
          }
        ],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "see",
            "text": "https ://developer.apple.com/documentation/apptrackingtransparency/attrackingmanager/3547038-trackingauthorizationstatus"
          },
          {
            "name": "since",
            "text": "4.1.1"
          }
        ],
        "docs": "Report application mute state to AdMob SDK",
        "complexTypes": [
          "ApplicationMutedOptions"
        ],
        "slug": "setapplicationmuted"
      },
      {
        "name": "setApplicationVolume",
        "signature": "(options: ApplicationVolumeOptions) => Promise<void>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "ApplicationVolumeOptions"
          }
        ],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "see",
            "text": "https ://developer.apple.com/documentation/apptrackingtransparency/attrackingmanager/3547038-trackingauthorizationstatus"
          },
          {
            "name": "since",
            "text": "4.1.1"
          }
        ],
        "docs": "Report application volume to AdMob SDK",
        "complexTypes": [
          "ApplicationVolumeOptions"
        ],
        "slug": "setapplicationvolume"
      },
      {
        "name": "showBanner",
        "signature": "(options: BannerAdOptions) => Promise<void>",
        "parameters": [
          {
            "name": "options",
            "docs": "AdOptions",
            "type": "BannerAdOptions"
          }
        ],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "group",
            "text": "Banner"
          },
          {
            "name": "param",
            "text": "options AdOptions"
          },
          {
            "name": "since",
            "text": "1.1.2"
          }
        ],
        "docs": "Show a banner Ad",
        "complexTypes": [
          "BannerAdOptions"
        ],
        "slug": "showbanner"
      },
      {
        "name": "hideBanner",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "group",
            "text": "Banner"
          },
          {
            "name": "since",
            "text": "1.1.2"
          }
        ],
        "docs": "Hide the banner, remove it from screen, but can show it later",
        "complexTypes": [],
        "slug": "hidebanner"
      },
      {
        "name": "resumeBanner",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "group",
            "text": "Banner"
          },
          {
            "name": "since",
            "text": "1.1.2"
          }
        ],
        "docs": "Resume the banner, show it after hide",
        "complexTypes": [],
        "slug": "resumebanner"
      },
      {
        "name": "removeBanner",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "group",
            "text": "Banner"
          },
          {
            "name": "since",
            "text": "1.1.2"
          }
        ],
        "docs": "Destroy the banner, remove it from screen.",
        "complexTypes": [],
        "slug": "removebanner"
      },
      {
        "name": "addListener",
        "signature": "(eventName: BannerAdPluginEvents.SizeChanged, listenerFunc: (info: AdMobBannerSize) => void) => Promise<PluginListenerHandle>",
        "parameters": [
          {
            "name": "eventName",
            "docs": "bannerAdSizeChanged",
            "type": "BannerAdPluginEvents.SizeChanged"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "(info: AdMobBannerSize) => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle>",
        "tags": [
          {
            "name": "group",
            "text": "Banner"
          },
          {
            "name": "param",
            "text": "eventName bannerAdSizeChanged"
          },
          {
            "name": "param",
            "text": "listenerFunc"
          },
          {
            "name": "since",
            "text": "3.0.0"
          }
        ],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle",
          "BannerAdPluginEvents",
          "AdMobBannerSize"
        ],
        "slug": "addlistenerbanneradplugineventssizechanged-"
      },
      {
        "name": "addListener",
        "signature": "(eventName: BannerAdPluginEvents.Loaded, listenerFunc: () => void) => Promise<PluginListenerHandle>",
        "parameters": [
          {
            "name": "eventName",
            "docs": "bannerAdLoaded",
            "type": "BannerAdPluginEvents.Loaded"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "() => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle>",
        "tags": [
          {
            "name": "group",
            "text": "Banner"
          },
          {
            "name": "param",
            "text": "eventName bannerAdLoaded"
          },
          {
            "name": "param",
            "text": "listenerFunc"
          },
          {
            "name": "since",
            "text": "3.0.0"
          }
        ],
        "docs": "Notice: request loaded Banner ad",
        "complexTypes": [
          "PluginListenerHandle",
          "BannerAdPluginEvents"
        ],
        "slug": "addlistenerbanneradplugineventsloaded-"
      },
      {
        "name": "addListener",
        "signature": "(eventName: BannerAdPluginEvents.FailedToLoad, listenerFunc: (info: AdMobError) => void) => Promise<PluginListenerHandle>",
        "parameters": [
          {
            "name": "eventName",
            "docs": "bannerAdFailedToLoad",
            "type": "BannerAdPluginEvents.FailedToLoad"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "(info: AdMobError) => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle>",
        "tags": [
          {
            "name": "group",
            "text": "Banner"
          },
          {
            "name": "param",
            "text": "eventName bannerAdFailedToLoad"
          },
          {
            "name": "param",
            "text": "listenerFunc"
          },
          {
            "name": "since",
            "text": "3.0.0"
          }
        ],
        "docs": "Notice: request failed Banner ad",
        "complexTypes": [
          "PluginListenerHandle",
          "BannerAdPluginEvents",
          "AdMobError"
        ],
        "slug": "addlistenerbanneradplugineventsfailedtoload-"
      },
      {
        "name": "addListener",
        "signature": "(eventName: BannerAdPluginEvents.Opened, listenerFunc: () => void) => Promise<PluginListenerHandle>",
        "parameters": [
          {
            "name": "eventName",
            "docs": "bannerAdOpened",
            "type": "BannerAdPluginEvents.Opened"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "() => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle>",
        "tags": [
          {
            "name": "group",
            "text": "Banner"
          },
          {
            "name": "param",
            "text": "eventName bannerAdOpened"
          },
          {
            "name": "param",
            "text": "listenerFunc"
          },
          {
            "name": "since",
            "text": "3.0.0"
          }
        ],
        "docs": "Notice: full-screen banner view will be presented in response to the user clicking on an ad.",
        "complexTypes": [
          "PluginListenerHandle",
          "BannerAdPluginEvents"
        ],
        "slug": "addlistenerbanneradplugineventsopened-"
      },
      {
        "name": "addListener",
        "signature": "(eventName: BannerAdPluginEvents.Closed, listenerFunc: () => void) => Promise<PluginListenerHandle>",
        "parameters": [
          {
            "name": "eventName",
            "docs": "bannerAdClosed",
            "type": "BannerAdPluginEvents.Closed"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "() => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle>",
        "tags": [
          {
            "name": "group",
            "text": "Banner"
          },
          {
            "name": "param",
            "text": "eventName bannerAdClosed"
          },
          {
            "name": "param",
            "text": "listenerFunc"
          },
          {
            "name": "since",
            "text": "3.0.0"
          }
        ],
        "docs": "Notice: The full-screen banner view will been dismissed.",
        "complexTypes": [
          "PluginListenerHandle",
          "BannerAdPluginEvents"
        ],
        "slug": "addlistenerbanneradplugineventsclosed-"
      },
      {
        "name": "addListener",
        "signature": "(eventName: BannerAdPluginEvents.AdImpression, listenerFunc: () => void) => Promise<PluginListenerHandle>",
        "parameters": [
          {
            "name": "eventName",
            "docs": "AdImpression",
            "type": "BannerAdPluginEvents.AdImpression"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "() => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle>",
        "tags": [
          {
            "name": "group",
            "text": "Banner"
          },
          {
            "name": "param",
            "text": "eventName AdImpression"
          },
          {
            "name": "param",
            "text": "listenerFunc"
          },
          {
            "name": "since",
            "text": "3.0.0"
          }
        ],
        "docs": "Unimplemented",
        "complexTypes": [
          "PluginListenerHandle",
          "BannerAdPluginEvents"
        ],
        "slug": "addlistenerbanneradplugineventsadimpression-"
      },
      {
        "name": "requestConsentInfo",
        "signature": "(options?: AdmobConsentRequestOptions | undefined) => Promise<AdmobConsentInfo>",
        "parameters": [
          {
            "name": "options",
            "docs": "ConsentRequestOptions",
            "type": "AdmobConsentRequestOptions | undefined"
          }
        ],
        "returns": "Promise<AdmobConsentInfo>",
        "tags": [
          {
            "name": "group",
            "text": "Consent"
          },
          {
            "name": "param",
            "text": "options ConsentRequestOptions"
          },
          {
            "name": "since",
            "text": "5.0.0"
          }
        ],
        "docs": "Request user consent information",
        "complexTypes": [
          "AdmobConsentInfo",
          "AdmobConsentRequestOptions"
        ],
        "slug": "requestconsentinfo"
      },
      {
        "name": "showConsentForm",
        "signature": "() => Promise<AdmobConsentInfo>",
        "parameters": [],
        "returns": "Promise<AdmobConsentInfo>",
        "tags": [
          {
            "name": "group",
            "text": "Consent"
          },
          {
            "name": "since",
            "text": "5.0.0"
          }
        ],
        "docs": "Shows a google user consent form (rendered from your GDPR message config).",
        "complexTypes": [
          "AdmobConsentInfo"
        ],
        "slug": "showconsentform"
      },
      {
        "name": "resetConsentInfo",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "group",
            "text": "Consent"
          },
          {
            "name": "since",
            "text": "5.0.0"
          }
        ],
        "docs": "Resets the UMP SDK state. Call requestConsentInfo function again to allow user modify their consent",
        "complexTypes": [],
        "slug": "resetconsentinfo"
      },
      {
        "name": "prepareInterstitial",
        "signature": "(options: AdOptions) => Promise<AdLoadInfo>",
        "parameters": [
          {
            "name": "options",
            "docs": "AdOptions",
            "type": "AdOptions"
          }
        ],
        "returns": "Promise<AdLoadInfo>",
        "tags": [
          {
            "name": "group",
            "text": "Interstitial"
          },
          {
            "name": "param",
            "text": "options AdOptions"
          },
          {
            "name": "since",
            "text": "1.1.2"
          }
        ],
        "docs": "Prepare interstitial banner",
        "complexTypes": [
          "AdLoadInfo",
          "AdOptions"
        ],
        "slug": "prepareinterstitial"
      },
      {
        "name": "showInterstitial",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "group",
            "text": "Interstitial"
          },
          {
            "name": "since",
            "text": "1.1.2"
          }
        ],
        "docs": "Show interstitial ad when it’s ready",
        "complexTypes": [],
        "slug": "showinterstitial"
      },
      {
        "name": "addListener",
        "signature": "(eventName: InterstitialAdPluginEvents.FailedToLoad, listenerFunc: (error: AdMobError) => void) => Promise<PluginListenerHandle>",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "InterstitialAdPluginEvents.FailedToLoad"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "(error: AdMobError) => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle>",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle",
          "InterstitialAdPluginEvents",
          "AdMobError"
        ],
        "slug": "addlistenerinterstitialadplugineventsfailedtoload-"
      },
      {
        "name": "addListener",
        "signature": "(eventName: InterstitialAdPluginEvents.Loaded, listenerFunc: (info: AdLoadInfo) => void) => Promise<PluginListenerHandle>",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "InterstitialAdPluginEvents.Loaded"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "(info: AdLoadInfo) => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle>",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle",
          "InterstitialAdPluginEvents",
          "AdLoadInfo"
        ],
        "slug": "addlistenerinterstitialadplugineventsloaded-"
      },
      {
        "name": "addListener",
        "signature": "(eventName: InterstitialAdPluginEvents.Dismissed, listenerFunc: () => void) => Promise<PluginListenerHandle>",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "InterstitialAdPluginEvents.Dismissed"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "() => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle>",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle",
          "InterstitialAdPluginEvents"
        ],
        "slug": "addlistenerinterstitialadplugineventsdismissed-"
      },
      {
        "name": "addListener",
        "signature": "(eventName: InterstitialAdPluginEvents.FailedToShow, listenerFunc: (error: AdMobError) => void) => Promise<PluginListenerHandle>",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "InterstitialAdPluginEvents.FailedToShow"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "(error: AdMobError) => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle>",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle",
          "InterstitialAdPluginEvents",
          "AdMobError"
        ],
        "slug": "addlistenerinterstitialadplugineventsfailedtoshow-"
      },
      {
        "name": "addListener",
        "signature": "(eventName: InterstitialAdPluginEvents.Showed, listenerFunc: () => void) => Promise<PluginListenerHandle>",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "InterstitialAdPluginEvents.Showed"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "() => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle>",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle",
          "InterstitialAdPluginEvents"
        ],
        "slug": "addlistenerinterstitialadplugineventsshowed-"
      },
      {
        "name": "prepareRewardVideoAd",
        "signature": "(options: RewardAdOptions) => Promise<AdLoadInfo>",
        "parameters": [
          {
            "name": "options",
            "docs": "RewardAdOptions",
            "type": "RewardAdOptions"
          }
        ],
        "returns": "Promise<AdLoadInfo>",
        "tags": [
          {
            "name": "group",
            "text": "RewardVideo"
          },
          {
            "name": "param",
            "text": "options RewardAdOptions"
          },
          {
            "name": "since",
            "text": "1.1.2"
          }
        ],
        "docs": "Prepare a reward video ad",
        "complexTypes": [
          "AdLoadInfo",
          "RewardAdOptions"
        ],
        "slug": "preparerewardvideoad"
      },
      {
        "name": "showRewardVideoAd",
        "signature": "() => Promise<AdMobRewardItem>",
        "parameters": [],
        "returns": "Promise<AdMobRewardItem>",
        "tags": [
          {
            "name": "group",
            "text": "RewardVideo"
          },
          {
            "name": "since",
            "text": "1.1.2"
          }
        ],
        "docs": "Show a reward video ad",
        "complexTypes": [
          "AdMobRewardItem"
        ],
        "slug": "showrewardvideoad"
      },
      {
        "name": "addListener",
        "signature": "(eventName: RewardAdPluginEvents.FailedToLoad, listenerFunc: (error: AdMobError) => void) => Promise<PluginListenerHandle>",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "RewardAdPluginEvents.FailedToLoad"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "(error: AdMobError) => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle>",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle",
          "RewardAdPluginEvents",
          "AdMobError"
        ],
        "slug": "addlistenerrewardadplugineventsfailedtoload-"
      },
      {
        "name": "addListener",
        "signature": "(eventName: RewardAdPluginEvents.Loaded, listenerFunc: (info: AdLoadInfo) => void) => Promise<PluginListenerHandle>",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "RewardAdPluginEvents.Loaded"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "(info: AdLoadInfo) => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle>",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle",
          "RewardAdPluginEvents",
          "AdLoadInfo"
        ],
        "slug": "addlistenerrewardadplugineventsloaded-"
      },
      {
        "name": "addListener",
        "signature": "(eventName: RewardAdPluginEvents.Rewarded, listenerFunc: (reward: AdMobRewardItem) => void) => Promise<PluginListenerHandle>",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "RewardAdPluginEvents.Rewarded"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "(reward: AdMobRewardItem) => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle>",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle",
          "RewardAdPluginEvents",
          "AdMobRewardItem"
        ],
        "slug": "addlistenerrewardadplugineventsrewarded-"
      },
      {
        "name": "addListener",
        "signature": "(eventName: RewardAdPluginEvents.Dismissed, listenerFunc: () => void) => Promise<PluginListenerHandle>",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "RewardAdPluginEvents.Dismissed"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "() => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle>",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle",
          "RewardAdPluginEvents"
        ],
        "slug": "addlistenerrewardadplugineventsdismissed-"
      },
      {
        "name": "addListener",
        "signature": "(eventName: RewardAdPluginEvents.FailedToShow, listenerFunc: (error: AdMobError) => void) => Promise<PluginListenerHandle>",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "RewardAdPluginEvents.FailedToShow"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "(error: AdMobError) => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle>",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle",
          "RewardAdPluginEvents",
          "AdMobError"
        ],
        "slug": "addlistenerrewardadplugineventsfailedtoshow-"
      },
      {
        "name": "addListener",
        "signature": "(eventName: RewardAdPluginEvents.Showed, listenerFunc: () => void) => Promise<PluginListenerHandle>",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "RewardAdPluginEvents.Showed"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "() => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle>",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle",
          "RewardAdPluginEvents"
        ],
        "slug": "addlistenerrewardadplugineventsshowed-"
      },
      {
        "name": "prepareRewardInterstitialAd",
        "signature": "(options: RewardInterstitialAdOptions) => Promise<AdLoadInfo>",
        "parameters": [
          {
            "name": "options",
            "docs": "RewardAdOptions",
            "type": "RewardInterstitialAdOptions"
          }
        ],
        "returns": "Promise<AdLoadInfo>",
        "tags": [
          {
            "name": "group",
            "text": "RewardVideo"
          },
          {
            "name": "param",
            "text": "options RewardAdOptions"
          },
          {
            "name": "since",
            "text": "1.1.2"
          }
        ],
        "docs": "Prepare a reward video ad",
        "complexTypes": [
          "AdLoadInfo",
          "RewardInterstitialAdOptions"
        ],
        "slug": "preparerewardinterstitialad"
      },
      {
        "name": "showRewardInterstitialAd",
        "signature": "() => Promise<AdMobRewardInterstitialItem>",
        "parameters": [],
        "returns": "Promise<AdMobRewardInterstitialItem>",
        "tags": [
          {
            "name": "group",
            "text": "RewardVideo"
          },
          {
            "name": "since",
            "text": "1.1.2"
          }
        ],
        "docs": "Show a reward video ad",
        "complexTypes": [
          "AdMobRewardInterstitialItem"
        ],
        "slug": "showrewardinterstitialad"
      },
      {
        "name": "addListener",
        "signature": "(eventName: RewardInterstitialAdPluginEvents.FailedToLoad, listenerFunc: (error: AdMobError) => void) => Promise<PluginListenerHandle>",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "RewardInterstitialAdPluginEvents.FailedToLoad"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "(error: AdMobError) => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle>",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle",
          "RewardInterstitialAdPluginEvents",
          "AdMobError"
        ],
        "slug": "addlistenerrewardinterstitialadplugineventsfailedtoload-"
      },
      {
        "name": "addListener",
        "signature": "(eventName: RewardInterstitialAdPluginEvents.Loaded, listenerFunc: (info: AdLoadInfo) => void) => Promise<PluginListenerHandle>",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "RewardInterstitialAdPluginEvents.Loaded"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "(info: AdLoadInfo) => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle>",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle",
          "RewardInterstitialAdPluginEvents",
          "AdLoadInfo"
        ],
        "slug": "addlistenerrewardinterstitialadplugineventsloaded-"
      },
      {
        "name": "addListener",
        "signature": "(eventName: RewardInterstitialAdPluginEvents.Rewarded, listenerFunc: (reward: AdMobRewardInterstitialItem) => void) => Promise<PluginListenerHandle>",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "RewardInterstitialAdPluginEvents.Rewarded"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "(reward: AdMobRewardInterstitialItem) => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle>",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle",
          "RewardInterstitialAdPluginEvents",
          "AdMobRewardInterstitialItem"
        ],
        "slug": "addlistenerrewardinterstitialadplugineventsrewarded-"
      },
      {
        "name": "addListener",
        "signature": "(eventName: RewardInterstitialAdPluginEvents.Dismissed, listenerFunc: () => void) => Promise<PluginListenerHandle>",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "RewardInterstitialAdPluginEvents.Dismissed"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "() => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle>",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle",
          "RewardInterstitialAdPluginEvents"
        ],
        "slug": "addlistenerrewardinterstitialadplugineventsdismissed-"
      },
      {
        "name": "addListener",
        "signature": "(eventName: RewardInterstitialAdPluginEvents.FailedToShow, listenerFunc: (error: AdMobError) => void) => Promise<PluginListenerHandle>",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "RewardInterstitialAdPluginEvents.FailedToShow"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "(error: AdMobError) => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle>",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle",
          "RewardInterstitialAdPluginEvents",
          "AdMobError"
        ],
        "slug": "addlistenerrewardinterstitialadplugineventsfailedtoshow-"
      },
      {
        "name": "addListener",
        "signature": "(eventName: RewardInterstitialAdPluginEvents.Showed, listenerFunc: () => void) => Promise<PluginListenerHandle>",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "RewardInterstitialAdPluginEvents.Showed"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "() => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle>",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle",
          "RewardInterstitialAdPluginEvents"
        ],
        "slug": "addlistenerrewardinterstitialadplugineventsshowed-"
      }
    ],
    "properties": []
  },
  "interfaces": [
    {
      "name": "AdMobInitializationOptions",
      "slug": "admobinitializationoptions",
      "docs": "",
      "tags": [],
      "extends": [],
      "methods": [],
      "properties": [
        {
          "name": "testingDevices",
          "tags": [
            {
              "text": "https ://developers.google.com/admob/android/test-ads#enable_test_devices",
              "name": "see"
            },
            {
              "text": "1.2.0",
              "name": "since"
            }
          ],
          "docs": "An Array of devices IDs that will be marked as tested devices if {@link AdMobInitializationOptions.initializeForTesting} is true\n(Real Ads will be served to Testing devices, but they will not count as 'real').",
          "complexTypes": [],
          "type": "string[] | undefined"
        },
        {
          "name": "initializeForTesting",
          "tags": [
            {
              "text": "AdMobInitializationOptions.testingDevices *",
              "name": "see"
            },
            {
              "text": "false",
              "name": "default"
            },
            {
              "text": "1.2.0",
              "name": "since"
            }
          ],
          "docs": "If set to true, the devices on {@link AdMobInitializationOptions.testingDevices} will\nbe registered to receive test production ads.",
          "complexTypes": [],
          "type": "boolean | undefined"
        },
        {
          "name": "tagForChildDirectedTreatment",
          "tags": [
            {
              "text": "https ://developers.google.com/admob/android/targeting#child-directed_setting",
              "name": "see"
            },
            {
              "text": "3.1.0",
              "name": "since"
            }
          ],
          "docs": "For purposes of the Children's Online Privacy Protection Act (COPPA),\nthere is a setting called tagForChildDirectedTreatment.",
          "complexTypes": [],
          "type": "boolean | undefined"
        },
        {
          "name": "tagForUnderAgeOfConsent",
          "tags": [
            {
              "text": "https ://developers.google.com/admob/android/targeting#users_under_the_age_of_consent",
              "name": "see"
            },
            {
              "text": "3.1.0",
              "name": "since"
            }
          ],
          "docs": "When using this feature,\na Tag For Users under the Age of Consent in Europe (TFUA) parameter will be included in all future ad requests.",
          "complexTypes": [],
          "type": "boolean | undefined"
        },
        {
          "name": "maxAdContentRating",
          "tags": [
            {
              "text": "https ://developers.google.com/admob/android/targeting#child-directed_setting",
              "name": "see"
            },
            {
              "text": "3.1.0",
              "name": "since"
            }
          ],
          "docs": "As an app developer,\nyou can indicate whether you want Google to treat your content as child-directed when you make an ad request.",
          "complexTypes": [
            "MaxAdContentRating"
          ],
          "type": "MaxAdContentRating"
        }
      ]
    },
    {
      "name": "TrackingAuthorizationStatusInterface",
      "slug": "trackingauthorizationstatusinterface",
      "docs": "",
      "tags": [
        {
          "text": "https://developer.apple.com/documentation/apptrackingtransparency/attrackingmanager/authorizationstatus",
          "name": "url"
        }
      ],
      "extends": [],
      "methods": [],
      "properties": [
        {
          "name": "status",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "'authorized' | 'denied' | 'notDetermined' | 'restricted'"
        }
      ]
    },
    {
      "name": "ApplicationMutedOptions",
      "slug": "applicationmutedoptions",
      "docs": "",
      "tags": [],
      "extends": [],
      "methods": [],
      "properties": [
        {
          "name": "muted",
          "tags": [
            {
              "text": "https ://developers.google.com/admob/android/global-settings",
              "name": "see"
            },
            {
              "text": "4.1.1",
              "name": "since"
            }
          ],
          "docs": "To inform the SDK that the app volume has been muted.\nNote: Video ads that are ineligible to be shown with muted audio are not returned for ad requests made,\nwhen the app volume is reported as muted or set to a value of 0. This may restrict a subset of the broader video ads pool from serving.",
          "complexTypes": [],
          "type": "boolean | undefined"
        }
      ]
    },
    {
      "name": "ApplicationVolumeOptions",
      "slug": "applicationvolumeoptions",
      "docs": "",
      "tags": [],
      "extends": [],
      "methods": [],
      "properties": [
        {
          "name": "volume",
          "tags": [
            {
              "text": "https ://developers.google.com/admob/android/global-settings",
              "name": "see"
            },
            {
              "text": "4.1.1",
              "name": "since"
            }
          ],
          "docs": "If your app has its own volume controls (such as custom music or sound effect volumes),\ndisclosing app volume to the Google Mobile Ads SDK allows video ads to respect app volume settings.\nenable set 0.0 - 1.0, any float allowed.",
          "complexTypes": [],
          "type": "0 | 1 | 0.1 | 0.2 | 0.3 | 0.4 | 0.5 | 0.6 | 0.7 | 0.8 | 0.9 | undefined"
        }
      ]
    },
    {
      "name": "BannerAdOptions",
      "slug": "banneradoptions",
      "docs": "This interface extends AdOptions",
      "tags": [],
      "extends": [
        "AdOptions"
      ],
      "methods": [],
      "properties": [
        {
          "name": "adSize",
          "tags": [
            {
              "text": "ADAPTIVE_BANNER",
              "name": "default"
            },
            {
              "text": "3.0.0",
              "name": "since"
            }
          ],
          "docs": "Banner Ad Size, defaults to ADAPTIVE_BANNER.\r\nIT can be: ADAPTIVE_BANNER, SMART_BANNER, BANNER,\r\nMEDIUM_RECTANGLE, FULL_BANNER, LEADERBOARD",
          "complexTypes": [
            "BannerAdSize"
          ],
          "type": "BannerAdSize"
        },
        {
          "name": "position",
          "tags": [
            {
              "text": "TOP_CENTER",
              "name": "default"
            },
            {
              "text": "1.1.2",
              "name": "since"
            }
          ],
          "docs": "Set Banner Ad position.\r\nTOP_CENTER or CENTER or BOTTOM_CENTER",
          "complexTypes": [
            "BannerAdPosition"
          ],
          "type": "BannerAdPosition"
        },
        {
          "name": "adId",
          "tags": [
            {
              "text": "https ://support.google.com/admob/answer/7356431?hl=en",
              "name": "see"
            },
            {
              "text": "1.1.2",
              "name": "since"
            }
          ],
          "docs": "The ad unit ID that you want to request",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "isTesting",
          "tags": [
            {
              "text": "false",
              "name": "default"
            },
            {
              "text": "1.1.2",
              "name": "since"
            }
          ],
          "docs": "You can use test mode of ad.",
          "complexTypes": [],
          "type": "boolean | undefined"
        },
        {
          "name": "margin",
          "tags": [
            {
              "text": "0",
              "name": "default"
            },
            {
              "text": "1.1.2",
              "name": "since"
            }
          ],
          "docs": "Margin Banner. Default is 0px;\r\nIf position is BOTTOM_CENTER, margin is be margin-bottom.\r\nIf position is TOP_CENTER, margin is be margin-top.",
          "complexTypes": [],
          "type": "number | undefined"
        },
        {
          "name": "npa",
          "tags": [
            {
              "text": "https ://developers.google.com/admob/ios/eu-consent",
              "name": "see"
            },
            {
              "text": "https ://developers.google.com/admob/android/eu-consent",
              "name": "see"
            },
            {
              "text": "false",
              "name": "default"
            },
            {
              "text": "1.2.0",
              "name": "since"
            }
          ],
          "docs": "The default behavior of the Google Mobile Ads SDK is to serve personalized ads.\r\nSet this to true to request Non-Personalized Ads",
          "complexTypes": [],
          "type": "boolean | undefined"
        }
      ]
    },
    {
      "name": "PluginListenerHandle",
      "slug": "pluginlistenerhandle",
      "docs": "",
      "tags": [],
      "extends": [],
      "methods": [],
      "properties": [
        {
          "name": "remove",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "() => Promise<void>"
        }
      ]
    },
    {
      "name": "AdMobBannerSize",
      "slug": "admobbannersize",
      "docs": "When notice listener of OnAdLoaded, you can get banner size.",
      "tags": [],
      "extends": [],
      "methods": [],
      "properties": [
        {
          "name": "width",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "number"
        },
        {
          "name": "height",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "number"
        }
      ]
    },
    {
      "name": "AdMobError",
      "slug": "admoberror",
      "docs": "For more information\r\nhttps://developers.google.com/android/reference/com/google/android/gms/ads/AdError",
      "tags": [],
      "extends": [],
      "methods": [],
      "properties": [
        {
          "name": "code",
          "tags": [],
          "docs": "Gets the error's code.",
          "complexTypes": [],
          "type": "number"
        },
        {
          "name": "message",
          "tags": [],
          "docs": "Gets the message describing the error.",
          "complexTypes": [],
          "type": "string"
        }
      ]
    },
    {
      "name": "AdmobConsentInfo",
      "slug": "admobconsentinfo",
      "docs": "",
      "tags": [],
      "extends": [],
      "methods": [],
      "properties": [
        {
          "name": "status",
          "tags": [
            {
              "text": "5.0.0",
              "name": "since"
            }
          ],
          "docs": "The consent status of the user.",
          "complexTypes": [
            "AdmobConsentStatus"
          ],
          "type": "AdmobConsentStatus"
        },
        {
          "name": "isConsentFormAvailable",
          "tags": [
            {
              "text": "5.0.0",
              "name": "since"
            }
          ],
          "docs": "If `true` a consent form is available and vice versa.",
          "complexTypes": [],
          "type": "boolean | undefined"
        }
      ]
    },
    {
      "name": "AdmobConsentRequestOptions",
      "slug": "admobconsentrequestoptions",
      "docs": "",
      "tags": [],
      "extends": [],
      "methods": [],
      "properties": [
        {
          "name": "debugGeography",
          "tags": [
            {
              "text": "5.0.0",
              "name": "since"
            }
          ],
          "docs": "Sets the debug geography to test the consent locally.",
          "complexTypes": [
            "AdmobConsentDebugGeography"
          ],
          "type": "AdmobConsentDebugGeography"
        },
        {
          "name": "testDeviceIdentifiers",
          "tags": [
            {
              "text": "5.0.0",
              "name": "since"
            }
          ],
          "docs": "An array of test device IDs to allow.\nNote: On iOS, the ID may renew if you uninstall and reinstall the app.",
          "complexTypes": [],
          "type": "string[] | undefined"
        },
        {
          "name": "tagForUnderAgeOfConsent",
          "tags": [
            {
              "text": "false",
              "name": "default"
            },
            {
              "text": "5.0.0",
              "name": "since"
            }
          ],
          "docs": "Set to `true` to provide the option for the user to accept being shown personalized ads.",
          "complexTypes": [],
          "type": "boolean | undefined"
        }
      ]
    },
    {
      "name": "AdLoadInfo",
      "slug": "adloadinfo",
      "docs": "",
      "tags": [],
      "extends": [],
      "methods": [],
      "properties": [
        {
          "name": "adUnitId",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "string"
        }
      ]
    },
    {
      "name": "AdOptions",
      "slug": "adoptions",
      "docs": "",
      "tags": [],
      "extends": [],
      "methods": [],
      "properties": [
        {
          "name": "adId",
          "tags": [
            {
              "text": "https ://support.google.com/admob/answer/7356431?hl=en",
              "name": "see"
            },
            {
              "text": "1.1.2",
              "name": "since"
            }
          ],
          "docs": "The ad unit ID that you want to request",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "isTesting",
          "tags": [
            {
              "text": "false",
              "name": "default"
            },
            {
              "text": "1.1.2",
              "name": "since"
            }
          ],
          "docs": "You can use test mode of ad.",
          "complexTypes": [],
          "type": "boolean | undefined"
        },
        {
          "name": "margin",
          "tags": [
            {
              "text": "0",
              "name": "default"
            },
            {
              "text": "1.1.2",
              "name": "since"
            }
          ],
          "docs": "Margin Banner. Default is 0px;\r\nIf position is BOTTOM_CENTER, margin is be margin-bottom.\r\nIf position is TOP_CENTER, margin is be margin-top.",
          "complexTypes": [],
          "type": "number | undefined"
        },
        {
          "name": "npa",
          "tags": [
            {
              "text": "https ://developers.google.com/admob/ios/eu-consent",
              "name": "see"
            },
            {
              "text": "https ://developers.google.com/admob/android/eu-consent",
              "name": "see"
            },
            {
              "text": "false",
              "name": "default"
            },
            {
              "text": "1.2.0",
              "name": "since"
            }
          ],
          "docs": "The default behavior of the Google Mobile Ads SDK is to serve personalized ads.\r\nSet this to true to request Non-Personalized Ads",
          "complexTypes": [],
          "type": "boolean | undefined"
        }
      ]
    },
    {
      "name": "RewardAdOptions",
      "slug": "rewardadoptions",
      "docs": "",
      "tags": [],
      "extends": [
        "AdOptions"
      ],
      "methods": [],
      "properties": [
        {
          "name": "ssv",
          "tags": [
            {
              "text": "https ://support.google.com/admob/answer/9603226?hl=en-GB",
              "name": "see"
            }
          ],
          "docs": "If you have enabled SSV in your AdMob Application. You can provide customData or\na userId be passed to your callback to do further processing on.\n\n*Important* You *HAVE* to define one of them.",
          "complexTypes": [
            "AtLeastOne"
          ],
          "type": "AtLeastOne<{\n    /**\n     * An optional UserId to pass to your SSV callback function.\n     */\n    userId: string;\n    /**\n     * An optional custom set of data to pass to your SSV callback function.\n     */\n    customData: string;\n  }>"
        },
        {
          "name": "adId",
          "tags": [
            {
              "text": "https ://support.google.com/admob/answer/7356431?hl=en",
              "name": "see"
            },
            {
              "text": "1.1.2",
              "name": "since"
            }
          ],
          "docs": "The ad unit ID that you want to request",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "isTesting",
          "tags": [
            {
              "text": "false",
              "name": "default"
            },
            {
              "text": "1.1.2",
              "name": "since"
            }
          ],
          "docs": "You can use test mode of ad.",
          "complexTypes": [],
          "type": "boolean | undefined"
        },
        {
          "name": "margin",
          "tags": [
            {
              "text": "0",
              "name": "default"
            },
            {
              "text": "1.1.2",
              "name": "since"
            }
          ],
          "docs": "Margin Banner. Default is 0px;\r\nIf position is BOTTOM_CENTER, margin is be margin-bottom.\r\nIf position is TOP_CENTER, margin is be margin-top.",
          "complexTypes": [],
          "type": "number | undefined"
        },
        {
          "name": "npa",
          "tags": [
            {
              "text": "https ://developers.google.com/admob/ios/eu-consent",
              "name": "see"
            },
            {
              "text": "https ://developers.google.com/admob/android/eu-consent",
              "name": "see"
            },
            {
              "text": "false",
              "name": "default"
            },
            {
              "text": "1.2.0",
              "name": "since"
            }
          ],
          "docs": "The default behavior of the Google Mobile Ads SDK is to serve personalized ads.\r\nSet this to true to request Non-Personalized Ads",
          "complexTypes": [],
          "type": "boolean | undefined"
        }
      ]
    },
    {
      "name": "AdMobRewardItem",
      "slug": "admobrewarditem",
      "docs": "For more information\r\nhttps://developers.google.com/admob/android/rewarded-video-adapters?hl=en",
      "tags": [],
      "extends": [],
      "methods": [],
      "properties": [
        {
          "name": "type",
          "tags": [],
          "docs": "Rewarded type user got",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "amount",
          "tags": [],
          "docs": "Rewarded amount user got",
          "complexTypes": [],
          "type": "number"
        }
      ]
    },
    {
      "name": "RewardInterstitialAdOptions",
      "slug": "rewardinterstitialadoptions",
      "docs": "",
      "tags": [],
      "extends": [
        "AdOptions"
      ],
      "methods": [],
      "properties": [
        {
          "name": "ssv",
          "tags": [
            {
              "text": "https ://support.google.com/admob/answer/9603226?hl=en-GB",
              "name": "see"
            }
          ],
          "docs": "If you have enabled SSV in your AdMob Application. You can provide customData or\na userId be passed to your callback to do further processing on.\n\n*Important* You *HAVE* to define one of them.",
          "complexTypes": [
            "AtLeastOne"
          ],
          "type": "AtLeastOne<{\n    /**\n     * An optional UserId to pass to your SSV callback function.\n     */\n    userId: string;\n    /**\n     * An optional custom set of data to pass to your SSV callback function.\n     */\n    customData: string;\n  }>"
        },
        {
          "name": "adId",
          "tags": [
            {
              "text": "https ://support.google.com/admob/answer/7356431?hl=en",
              "name": "see"
            },
            {
              "text": "1.1.2",
              "name": "since"
            }
          ],
          "docs": "The ad unit ID that you want to request",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "isTesting",
          "tags": [
            {
              "text": "false",
              "name": "default"
            },
            {
              "text": "1.1.2",
              "name": "since"
            }
          ],
          "docs": "You can use test mode of ad.",
          "complexTypes": [],
          "type": "boolean | undefined"
        },
        {
          "name": "margin",
          "tags": [
            {
              "text": "0",
              "name": "default"
            },
            {
              "text": "1.1.2",
              "name": "since"
            }
          ],
          "docs": "Margin Banner. Default is 0px;\r\nIf position is BOTTOM_CENTER, margin is be margin-bottom.\r\nIf position is TOP_CENTER, margin is be margin-top.",
          "complexTypes": [],
          "type": "number | undefined"
        },
        {
          "name": "npa",
          "tags": [
            {
              "text": "https ://developers.google.com/admob/ios/eu-consent",
              "name": "see"
            },
            {
              "text": "https ://developers.google.com/admob/android/eu-consent",
              "name": "see"
            },
            {
              "text": "false",
              "name": "default"
            },
            {
              "text": "1.2.0",
              "name": "since"
            }
          ],
          "docs": "The default behavior of the Google Mobile Ads SDK is to serve personalized ads.\r\nSet this to true to request Non-Personalized Ads",
          "complexTypes": [],
          "type": "boolean | undefined"
        }
      ]
    },
    {
      "name": "AdMobRewardInterstitialItem",
      "slug": "admobrewardinterstitialitem",
      "docs": "For more information\nhttps://developers.google.com/admob/android/rewarded-video-adapters?hl=en",
      "tags": [],
      "extends": [],
      "methods": [],
      "properties": [
        {
          "name": "type",
          "tags": [],
          "docs": "Rewarded type user got",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "amount",
          "tags": [],
          "docs": "Rewarded amount user got",
          "complexTypes": [],
          "type": "number"
        }
      ]
    }
  ],
  "enums": [
    {
      "name": "MaxAdContentRating",
      "slug": "maxadcontentrating",
      "members": [
        {
          "name": "General",
          "value": "'General'",
          "tags": [],
          "docs": "Content suitable for general audiences, including families."
        },
        {
          "name": "ParentalGuidance",
          "value": "'ParentalGuidance'",
          "tags": [],
          "docs": "Content suitable for most audiences with parental guidance."
        },
        {
          "name": "Teen",
          "value": "'Teen'",
          "tags": [],
          "docs": "Content suitable for teen and older audiences."
        },
        {
          "name": "MatureAudience",
          "value": "'MatureAudience'",
          "tags": [],
          "docs": "Content suitable only for mature audiences."
        }
      ]
    },
    {
      "name": "BannerAdSize",
      "slug": "banneradsize",
      "members": [
        {
          "name": "BANNER",
          "value": "'BANNER'",
          "tags": [],
          "docs": "Mobile Marketing Association (MMA)\r\nbanner ad size (320x50 density-independent pixels)."
        },
        {
          "name": "FULL_BANNER",
          "value": "'FULL_BANNER'",
          "tags": [],
          "docs": "Interactive Advertising Bureau (IAB)\r\nfull banner ad size (468x60 density-independent pixels)."
        },
        {
          "name": "LARGE_BANNER",
          "value": "'LARGE_BANNER'",
          "tags": [],
          "docs": "Large banner ad size (320x100 density-independent pixels)."
        },
        {
          "name": "MEDIUM_RECTANGLE",
          "value": "'MEDIUM_RECTANGLE'",
          "tags": [],
          "docs": "Interactive Advertising Bureau (IAB)\r\nmedium rectangle ad size (300x250 density-independent pixels)."
        },
        {
          "name": "LEADERBOARD",
          "value": "'LEADERBOARD'",
          "tags": [],
          "docs": "Interactive Advertising Bureau (IAB)\r\nleaderboard ad size (728x90 density-independent pixels)."
        },
        {
          "name": "ADAPTIVE_BANNER",
          "value": "'ADAPTIVE_BANNER'",
          "tags": [],
          "docs": "A dynamically sized banner that is full-width and auto-height."
        },
        {
          "name": "SMART_BANNER",
          "value": "'SMART_BANNER'",
          "tags": [
            {
              "text": "Will be removed in next AdMob versions use `ADAPTIVE_BANNER`\r\nScreen width x 32|50|90",
              "name": "deprecated"
            }
          ],
          "docs": ""
        }
      ]
    },
    {
      "name": "BannerAdPosition",
      "slug": "banneradposition",
      "members": [
        {
          "name": "TOP_CENTER",
          "value": "'TOP_CENTER'",
          "tags": [],
          "docs": "Banner position be top-center"
        },
        {
          "name": "CENTER",
          "value": "'CENTER'",
          "tags": [],
          "docs": "Banner position be center"
        },
        {
          "name": "BOTTOM_CENTER",
          "value": "'BOTTOM_CENTER'",
          "tags": [],
          "docs": "Banner position be bottom-center(default)"
        }
      ]
    },
    {
      "name": "BannerAdPluginEvents",
      "slug": "banneradpluginevents",
      "members": [
        {
          "name": "SizeChanged",
          "value": "\"bannerAdSizeChanged\"",
          "tags": [],
          "docs": ""
        },
        {
          "name": "Loaded",
          "value": "\"bannerAdLoaded\"",
          "tags": [],
          "docs": ""
        },
        {
          "name": "FailedToLoad",
          "value": "\"bannerAdFailedToLoad\"",
          "tags": [],
          "docs": ""
        },
        {
          "name": "Opened",
          "value": "\"bannerAdOpened\"",
          "tags": [],
          "docs": "Open \"Adsense\" Event after user click banner"
        },
        {
          "name": "Closed",
          "value": "\"bannerAdClosed\"",
          "tags": [],
          "docs": "Close \"Adsense\" Event after user click banner"
        },
        {
          "name": "AdImpression",
          "value": "\"bannerAdImpression\"",
          "tags": [],
          "docs": "Similarly, this method should be called when an impression is recorded for the ad by the mediated SDK."
        }
      ]
    },
    {
      "name": "AdmobConsentStatus",
      "slug": "admobconsentstatus",
      "members": [
        {
          "name": "NOT_REQUIRED",
          "value": "'NOT_REQUIRED'",
          "tags": [],
          "docs": "User consent not required."
        },
        {
          "name": "OBTAINED",
          "value": "'OBTAINED'",
          "tags": [],
          "docs": "User consent already obtained."
        },
        {
          "name": "REQUIRED",
          "value": "'REQUIRED'",
          "tags": [],
          "docs": "User consent required but not yet obtained."
        },
        {
          "name": "UNKNOWN",
          "value": "'UNKNOWN'",
          "tags": [],
          "docs": "Unknown consent status, AdsConsent.requestInfoUpdate needs to be called to update it."
        }
      ]
    },
    {
      "name": "AdmobConsentDebugGeography",
      "slug": "admobconsentdebuggeography",
      "members": [
        {
          "name": "DISABLED",
          "value": "0",
          "tags": [],
          "docs": "Debug geography disabled."
        },
        {
          "name": "EEA",
          "value": "1",
          "tags": [],
          "docs": "Geography appears as in EEA for debug devices."
        },
        {
          "name": "NOT_EEA",
          "value": "2",
          "tags": [],
          "docs": "Geography appears as not in EEA for debug devices."
        }
      ]
    },
    {
      "name": "InterstitialAdPluginEvents",
      "slug": "interstitialadpluginevents",
      "members": [
        {
          "name": "Loaded",
          "value": "'interstitialAdLoaded'",
          "tags": [],
          "docs": "Emits after trying to prepare and Interstitial, when it is loaded and ready to be show"
        },
        {
          "name": "FailedToLoad",
          "value": "'interstitialAdFailedToLoad'",
          "tags": [],
          "docs": "Emits after trying to prepare and Interstitial, when it could not be loaded"
        },
        {
          "name": "Showed",
          "value": "'interstitialAdShowed'",
          "tags": [],
          "docs": "Emits when the Interstitial ad is visible to the user"
        },
        {
          "name": "FailedToShow",
          "value": "'interstitialAdFailedToShow'",
          "tags": [],
          "docs": "Emits when the Interstitial ad is failed to show"
        },
        {
          "name": "Dismissed",
          "value": "'interstitialAdDismissed'",
          "tags": [],
          "docs": "Emits when the Interstitial ad is not visible to the user anymore."
        }
      ]
    },
    {
      "name": "RewardAdPluginEvents",
      "slug": "rewardadpluginevents",
      "members": [
        {
          "name": "Loaded",
          "value": "'onRewardedVideoAdLoaded'",
          "tags": [],
          "docs": "Emits after trying to prepare a RewardAd and the Video is loaded and ready to be show"
        },
        {
          "name": "FailedToLoad",
          "value": "'onRewardedVideoAdFailedToLoad'",
          "tags": [],
          "docs": "Emits after trying to prepare a RewardAd when it could not be loaded"
        },
        {
          "name": "Showed",
          "value": "'onRewardedVideoAdShowed'",
          "tags": [],
          "docs": "Emits when the AdReward video is visible to the user"
        },
        {
          "name": "FailedToShow",
          "value": "'onRewardedVideoAdFailedToShow'",
          "tags": [],
          "docs": "Emits when the AdReward video is failed to show"
        },
        {
          "name": "Dismissed",
          "value": "'onRewardedVideoAdDismissed'",
          "tags": [],
          "docs": "Emits when the AdReward video is not visible to the user anymore.\r\n\r\n**Important**: This has nothing to do with the reward it self. This event\r\nwill emits in this two cases:\r\n1. The user starts the video ad but close it before the reward emit.\r\n2. The user start the video and see it until end, then gets the reward\r\nand after that the ad is closed."
        },
        {
          "name": "Rewarded",
          "value": "'onRewardedVideoAdReward'",
          "tags": [],
          "docs": "Emits when user get rewarded from AdReward"
        }
      ]
    },
    {
      "name": "RewardInterstitialAdPluginEvents",
      "slug": "rewardinterstitialadpluginevents",
      "members": [
        {
          "name": "Loaded",
          "value": "'onRewardedInterstitialAdLoaded'",
          "tags": [],
          "docs": "Emits after trying to prepare a RewardAd and the Video is loaded and ready to be show"
        },
        {
          "name": "FailedToLoad",
          "value": "'onRewardedInterstitialAdFailedToLoad'",
          "tags": [],
          "docs": "Emits after trying to prepare a RewardAd when it could not be loaded"
        },
        {
          "name": "Showed",
          "value": "'onRewardedInterstitialAdShowed'",
          "tags": [],
          "docs": "Emits when the AdReward video is visible to the user"
        },
        {
          "name": "FailedToShow",
          "value": "'onRewardedInterstitialAdFailedToShow'",
          "tags": [],
          "docs": "Emits when the AdReward video is failed to show"
        },
        {
          "name": "Dismissed",
          "value": "'onRewardedInterstitialAdDismissed'",
          "tags": [],
          "docs": "Emits when the AdReward video is not visible to the user anymore.\n\n**Important**: This has nothing to do with the reward it self. This event\nwill emits in this two cases:\n1. The user starts the video ad but close it before the reward emit.\n2. The user start the video and see it until end, then gets the reward\nand after that the ad is closed."
        },
        {
          "name": "Rewarded",
          "value": "'onRewardedInterstitialAdReward'",
          "tags": [],
          "docs": "Emits when user get rewarded from AdReward"
        }
      ]
    }
  ],
  "typeAliases": [
    {
      "name": "AtLeastOne",
      "slug": "atleastone",
      "docs": "",
      "types": [
        {
          "text": "{[K in keyof T]: Pick<T, K>}[keyof T]",
          "complexTypes": [
            "T",
            "Pick",
            "K"
          ]
        }
      ]
    },
    {
      "name": "Pick",
      "slug": "pick",
      "docs": "From T, pick a set of properties whose keys are in the union K",
      "types": [
        {
          "text": "{\r\n    [P in K]: T[P];\r\n}",
          "complexTypes": [
            "K",
            "T",
            "P"
          ]
        }
      ]
    }
  ],
  "pluginConfigs": []
}